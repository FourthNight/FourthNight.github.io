<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>探地雷达全波反演</title>
      <link href="/2024/04/02/GPR-FWI-NN/"/>
      <url>/2024/04/02/GPR-FWI-NN/</url>
      
        <content type="html"><![CDATA[<h4 id="A-Machine-Learning-Based-Fast-Forward-Solver-for-Ground-Penetrating-Radar-With-Application-to-Full-Waveform-Inversion"><a href="#A-Machine-Learning-Based-Fast-Forward-Solver-for-Ground-Penetrating-Radar-With-Application-to-Full-Waveform-Inversion" class="headerlink" title="A Machine Learning-Based Fast-Forward Solver for Ground Penetrating Radar With Application to Full-Waveform Inversion"></a>A Machine Learning-Based Fast-Forward Solver for Ground Penetrating Radar With Application to Full-Waveform Inversion</h4><p><em>IEEE TRANSACTIONS ON GEOSCIENCE AND REMOTE SENSING</em></p><p>使用神经网络建立正向模型，输入为：      </p><ul><li>Water fraction of the concrete ($WC$). 含水率</li><li>Radius of the rebar ($R$). 钢筋半径</li><li>Depth of the rebar ($D$). 埋深</li></ul><p>输出为测点处探地雷达信号。通过优化算法匹配探地雷达信号和网络输出，得到输入，完成全波反演。</p><h4 id="GPR-Full-Waveform-Inversion-With-Deep-Learning-Forward-Modeling-A-Case-Study-From-Non-Destructive-Testing"><a href="#GPR-Full-Waveform-Inversion-With-Deep-Learning-Forward-Modeling-A-Case-Study-From-Non-Destructive-Testing" class="headerlink" title="GPR Full-Waveform Inversion With Deep-Learning Forward Modeling: A Case Study From Non-Destructive Testing"></a>GPR Full-Waveform Inversion With Deep-Learning Forward Modeling: A Case Study From Non-Destructive Testing</h4><p><em>IEEE TRANSACTIONS ON GEOSCIENCE AND REMOTE SENSING</em></p><p>上一篇针对<em>A-scan</em>，这里能够<em>B-scan</em>了。</p><p>同样使用神经网络模型，输入为：</p><ul><li>the water fraction ($MC$) 含水率</li><li>the diameter ($R$) 钢筋直径</li><li>depth ($D$) 埋深</li><li>position ($X$) 位置</li></ul><p>显然，输入比上面多了一个位置$X$，对于<em>B-scan</em>信号能够给出位置信息了。</p><p>同样的用优化算法匹配，获得输入的值，完成全波反演。</p>]]></content>
      
      
      <categories>
          
          <category> FWI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB 备忘录</title>
      <link href="/2024/04/01/MATLAB-ticks/"/>
      <url>/2024/04/01/MATLAB-ticks/</url>
      
        <content type="html"><![CDATA[<p>最近只能记得七秒内的东西，七秒外的东西要在此记录一下！</p><h5 id="大文件存储mat"><a href="#大文件存储mat" class="headerlink" title="大文件存储mat"></a>大文件存储<code>mat</code></h5><p>当要存储的<code>mat</code>文件过大时：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save(path , ‘X_all’ ,’-v7<span class="number">.3</span>’ )</span><br></pre></td></tr></table></figure><h5 id="python大文件mat读取"><a href="#python大文件mat读取" class="headerlink" title="python大文件mat读取"></a><code>python</code>大文件<code>mat</code>读取</h5><p>对于<code>-v7.3</code>存储的<code>mat</code>文件一般这么读</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line">dict_data = h5py.File(X_all.mat) <span class="comment">#dict_data文件里可能有多个cell,各对应着一个dataset</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dict_data.keys()) <span class="comment"># 可以用keys的方法查看cell的名字</span></span><br><span class="line"><span class="comment"># 输出：&lt;KeysViewHDF5 [&#x27;X_all&#x27;]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dict_data.values()) <span class="comment">#可以用values方法查看各个cell的信息</span></span><br><span class="line"><span class="comment"># 输出：ValuesViewHDF5(&lt;HDF5 file &quot;X_all.mat&quot; (mode r+)&gt;)</span></span><br><span class="line"></span><br><span class="line">data = dict_data[<span class="string">&#x27;X_all&#x27;</span>] <span class="comment">#选取一个cell</span></span><br><span class="line"><span class="built_in">print</span>(data.shape)<span class="comment">#查看维度，是matlab写入数据的转置</span></span><br><span class="line"><span class="comment"># 输出：(522, 3145776)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 需要转置回来</span></span><br><span class="line">data_t = np.transpose(data) <span class="comment">#data_t是numpy.ndarray</span></span><br><span class="line"><span class="comment"># 再将其存为npy格式文件</span></span><br><span class="line">np.save(<span class="string">&#x27;X_all.npy&#x27;</span>, data_t)</span><br><span class="line"><span class="comment"># 要用再这么读</span></span><br><span class="line">matrix = np.load(X_all.npy<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>非<code>-v7.3</code>存储的<code>mat</code>文件这么读就行，这里直接存成了<code>tensor</code>了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">h=<span class="string">r&#x27;D:\a\薛事成同步文件\我的坚果云\波场反演+NN\2D_file\energy_file\FT_Signal_0.mat&#x27;</span></span><br><span class="line"></span><br><span class="line">mat_dict  = scio.loadmat(path)</span><br><span class="line"></span><br><span class="line">data_name_1 = <span class="string">&#x27;FT_Signal_A_real&#x27;</span></span><br><span class="line"></span><br><span class="line">FT_Signal_A_real = torch.tensor(mat_dict[data_name_1])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="清GPU内存"><a href="#清GPU内存" class="headerlink" title="清GPU内存"></a>清<code>GPU</code>内存</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch </span><br><span class="line">torch.cuda.empty_cache() </span><br></pre></td></tr></table></figure><h5 id="大文件txt的matlab读取"><a href="#大文件txt的matlab读取" class="headerlink" title="大文件txt的matlab读取"></a>大文件<code>txt</code>的matlab读取</h5><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file=fullfile(<span class="string">&#x27;F:\Xue\result_pic\Untitle_119_3\log.txt&#x27;</span>);      <span class="comment">% 导入.txt文件</span></span><br><span class="line"></span><br><span class="line">f=fopen(file);    <span class="comment">%以只读模式打开混合格式文本文件</span></span><br><span class="line"></span><br><span class="line">dt=textscan(f,<span class="built_in">repmat</span>(<span class="string">&#x27;%f&#x27;</span>,<span class="number">1</span>,<span class="number">9</span>));         <span class="comment">%采用textscan 读取数据</span></span><br><span class="line"></span><br><span class="line">fclose(f)</span><br></pre></td></tr></table></figure><h5 id="MATLAB滑动平均法"><a href="#MATLAB滑动平均法" class="headerlink" title="MATLAB滑动平均法"></a><code>MATLAB</code>滑动平均法</h5><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movmean(dt&#123;<span class="number">3</span>&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ADA原理解读</title>
      <link href="/2024/03/23/adaptive-discriminator-augmentation/"/>
      <url>/2024/03/23/adaptive-discriminator-augmentation/</url>
      
        <content type="html"><![CDATA[<h3 id="Adaptive-Discriminator-Augmentation-ADA"><a href="#Adaptive-Discriminator-Augmentation-ADA" class="headerlink" title="Adaptive Discriminator Augmentation(ADA)"></a>Adaptive Discriminator Augmentation(ADA)</h3><ul><li>避免手动调整增强强度, 根据过拟合程度动态控制它</li><li>量化过拟合的标准方法：使用一个单独的验证集，并观察其相对于训练集的行为</li></ul><span id="more"></span><ul><li>在N个连续的小批次上的平均值表示为$E[·]$</li></ul><p>$$r_v &#x3D; \frac{E[D_{train}]-E[D_{validation}]}{E[D_{train}]-E[D_{generated}]}$$</p><p>$$r_t &#x3D; E[\mathsf{sign}(D_{train})]$$</p><p>对于$r_v$和$r_t$来说，值为0时是没有过拟合，值为1时是完全过拟合。</p><ul><li><p>调整增强概率p以使选定的指标($r_v$或$r_t$)匹配适当的目标值。</p></li><li><p>$r_v$表示验证集的输出相对于训练集和生成图像的输出。由于它假定存在一个单独的验证集，我们主要将其作为一种比较方法。</p></li><li><p>$r_t$估计获得正鉴别器输出的训练集的部分。我们发现这对于选定的目标值和其他超参数来说，远不如直接查看$E[D_{train}]$那么敏感。</p></li></ul><p>将p初始化为零，并根据选定的过拟合指标每四个小批次调整一次它的值。如果$r_t$表征过拟合太多&#x2F;太少，我们通过增加&#x2F;减少固定量来进行调整，保证$r_t$的值近似在0.6。</p>]]></content>
      
      
      <categories>
          
          <category> GAN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>StyleGAN2-ADA源码解读（二）</title>
      <link href="/2024/03/21/StyleGAN-2-2/"/>
      <url>/2024/03/21/StyleGAN-2-2/</url>
      
        <content type="html"><![CDATA[<p>费了半天劲儿终于找到了<code>training_loop</code>中调用<code>augment_pipe</code>的地方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loss = dnnlib.util.construct_class_by_name(device=device, **ddp_modules, **loss_kwargs) <span class="comment"># subclass of training.loss.Loss</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StyleGAN2Loss</span>(<span class="title class_ inherited__">Loss</span>):</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_D</span>(<span class="params">self, img, c, sync</span>):</span><br><span class="line">        <span class="keyword">if</span> self.augment_pipe <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            img = self.augment_pipe(img)</span><br><span class="line">        <span class="keyword">with</span> misc.ddp_sync(self.D, sync):</span><br><span class="line">            logits = self.D(img, c)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accumulate_gradients</span>(<span class="params">self, phase, real_img, real_c, gen_z, gen_c, sync, gain</span>):</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loss.accumulate_gradients(phase=phase.name, real_img=real_img, real_c=real_c, gen_z=gen_z, gen_c=gen_c, sync=sync, gain=gain)</span><br><span class="line"></span><br><span class="line">   <span class="comment">#Execute ADA heuristic.</span></span><br><span class="line">   <span class="keyword">if</span> (ada_stats <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>) <span class="keyword">and</span> (batch_idx % ada_interval == <span class="number">0</span>):</span><br><span class="line">       ada_stats.update()</span><br><span class="line">       adjust = np.sign(ada_stats[<span class="string">&#x27;Loss/signs/real&#x27;</span>] - ada_target) * (batch_size * ada_interval) / (ada_kimg * <span class="number">1000</span>)</span><br><span class="line">       augment_pipe.p.copy_((augment_pipe.p + adjust).<span class="built_in">max</span>(misc.constant(<span class="number">0</span>, device=device)))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GAN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>StyleGAN2-ADA源码解读（一）</title>
      <link href="/2024/03/17/StyleGAN-2/"/>
      <url>/2024/03/17/StyleGAN-2/</url>
      
        <content type="html"><![CDATA[<p>在这里对StyleGAN 2 ADA的源码进行一个粗略的解读，主要目的是获得ADA的使用方法，顺便学习一下代码风格。</p><h3 id="EasyDict"><a href="#EasyDict" class="headerlink" title="EasyDict"></a><code>EasyDict</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">args = dnnlib.EasyDict()</span><br></pre></td></tr></table></figure><p>其中，<code>dnnlib</code>为自定义包，<code>EasyDict</code>是其中定义的一个类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EasyDict</span>(<span class="title class_ inherited__">dict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Convenience class that behaves like a dict but allows access with the attribute syntax.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="type">Any</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, name: <span class="built_in">str</span>, value: <span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self[name] = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delattr__</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">del</span> self[name]</span><br></pre></td></tr></table></figure><p>这里<code>__getattr__</code>这里应该输入<code>key</code>返回值的函数，<code>__getattr__</code>是新增键值对的函数，<code>__delattr__</code>是删除键值对的函数。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.data = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">return</span> self.data[name]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">f&quot;&#x27;Example&#x27; object has no attribute &#x27;<span class="subst">&#123;name&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Example 对象</span></span><br><span class="line">obj = Example()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问存在的属性</span></span><br><span class="line"><span class="built_in">print</span>(obj.a)  <span class="comment"># 输出: 1</span></span><br><span class="line"><span class="built_in">print</span>(obj.b)  <span class="comment"># 输出: 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问不存在的属性</span></span><br><span class="line"><span class="built_in">print</span>(obj.x)  <span class="comment"># 引发 AttributeError 异常，提示属性不存在</span></span><br></pre></td></tr></table></figure><p>定义了<code>__getattr__</code>之后，就可以通过<code>.xxxx</code>来当字典用了。</p><h3 id="General-options-gpus-snap-metrics-seed"><a href="#General-options-gpus-snap-metrics-seed" class="headerlink" title="General options: gpus, snap, metrics, seed"></a><code>General options: gpus, snap, metrics, seed</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># ------------------------------------------</span></span><br><span class="line">    <span class="comment"># General options: gpus, snap, metrics, seed</span></span><br><span class="line">    <span class="comment"># ------------------------------------------</span></span><br><span class="line"><span class="keyword">if</span> gpus <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    gpus = <span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">isinstance</span>(gpus, <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (gpus &gt;= <span class="number">1</span> <span class="keyword">and</span> gpus &amp; (gpus - <span class="number">1</span>) == <span class="number">0</span>):</span><br><span class="line">    <span class="keyword">raise</span> UserError(<span class="string">&#x27;--gpus must be a power of two&#x27;</span>)</span><br><span class="line">args.num_gpus = gpus</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> snap <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    snap = <span class="number">50</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">isinstance</span>(snap, <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">if</span> snap &lt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">raise</span> UserError(<span class="string">&#x27;--snap must be at least 1&#x27;</span>)</span><br><span class="line">args.image_snapshot_ticks = snap</span><br><span class="line">args.network_snapshot_ticks = snap</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> metrics <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    metrics = [<span class="string">&#x27;fid50k_full&#x27;</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">isinstance</span>(metrics, <span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>(metric_main.is_valid_metric(metric) <span class="keyword">for</span> metric <span class="keyword">in</span> metrics):</span><br><span class="line">    <span class="keyword">raise</span> UserError(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;--metrics can only contain the following values:&#x27;</span>] + metric_main.list_valid_metrics()))</span><br><span class="line">args.metrics = metrics</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> seed <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    seed = <span class="number">0</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">isinstance</span>(seed, <span class="built_in">int</span>)</span><br><span class="line">args.random_seed = seed</span><br></pre></td></tr></table></figure><p>这里是判断函数的输入是否满足要求，并存入<code>args</code>中，因为<code>args</code>是<code> dnnlib.EasyDict()</code>的实例化，而其中定义了<code>__getattr__</code>方法，因此通过<code>args.num_gpus = gpus</code>的方法赋值是对的。</p><p>从下面这段代码可以看到<code>setup_training_loop_kwargs</code>整个函数返回的是描述<code>desc</code>与存储参数的<code>args</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">setup_training_loop_kwargs</span>(<span class="params">...</span>)</span><br><span class="line">    <span class="keyword">return</span> desc, args</span><br></pre></td></tr></table></figure><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a><code>main</code>函数</h3><p>最终<code>main</code>函数中调用了<code>subprocess_fn</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">subprocess_fn</span>(<span class="params">rank, args, temp_dir</span>):</span><br><span class="line">    dnnlib.util.Logger(file_name=os.path.join(args.run_dir, <span class="string">&#x27;log.txt&#x27;</span>), file_mode=<span class="string">&#x27;a&#x27;</span>, should_flush=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Init torch.distributed.</span></span><br><span class="line">    <span class="keyword">if</span> args.num_gpus &gt; <span class="number">1</span>:</span><br><span class="line">        init_file = os.path.abspath(os.path.join(temp_dir, <span class="string">&#x27;.torch_distributed_init&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> os.name == <span class="string">&#x27;nt&#x27;</span>:</span><br><span class="line">            init_method = <span class="string">&#x27;file:///&#x27;</span> + init_file.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            torch.distributed.init_process_group(backend=<span class="string">&#x27;gloo&#x27;</span>, init_method=init_method, rank=rank, world_size=args.num_gpus)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            init_method = <span class="string">f&#x27;file://<span class="subst">&#123;init_file&#125;</span>&#x27;</span></span><br><span class="line">            torch.distributed.init_process_group(backend=<span class="string">&#x27;nccl&#x27;</span>, init_method=init_method, rank=rank, world_size=args.num_gpus)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Init torch_utils.</span></span><br><span class="line">    sync_device = torch.device(<span class="string">&#x27;cuda&#x27;</span>, rank) <span class="keyword">if</span> args.num_gpus &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    training_stats.init_multiprocessing(rank=rank, sync_device=sync_device)</span><br><span class="line">    <span class="keyword">if</span> rank != <span class="number">0</span>:</span><br><span class="line">        custom_ops.verbosity = <span class="string">&#x27;none&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Execute training loop.</span></span><br><span class="line">    training_loop.training_loop(rank=rank, **args)</span><br></pre></td></tr></table></figure><p>可以看到最后把储存参数的字典<code>args</code>输入到<code>training_loop.training_loop</code>里面去了。</p><h3 id="training-loop解读"><a href="#training-loop解读" class="headerlink" title="training_loop解读"></a><code>training_loop</code>解读</h3><p>下面解读<code>training_loop</code>的内容，首先是载入<code>training set</code></p><h4 id="Load-training-set"><a href="#Load-training-set" class="headerlink" title="Load training set"></a>Load training set</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load training set.</span></span><br><span class="line">   <span class="keyword">if</span> rank == <span class="number">0</span>:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;Loading training set...&#x27;</span>)</span><br><span class="line">   training_set = dnnlib.util.construct_class_by_name(**training_set_kwargs) <span class="comment"># subclass of training.dataset.Dataset</span></span><br><span class="line">   training_set_sampler = misc.InfiniteSampler(dataset=training_set, rank=rank, num_replicas=num_gpus, seed=random_seed)</span><br><span class="line">   training_set_iterator = <span class="built_in">iter</span>(torch.utils.data.DataLoader(dataset=training_set, sampler=training_set_sampler, batch_size=batch_size//num_gpus, **data_loader_kwargs))</span><br><span class="line">   <span class="keyword">if</span> rank == <span class="number">0</span>:</span><br><span class="line">       <span class="built_in">print</span>()</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;Num images: &#x27;</span>, <span class="built_in">len</span>(training_set))</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;Image shape:&#x27;</span>, training_set.image_shape)</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;Label shape:&#x27;</span>, training_set.label_shape)</span><br><span class="line">       <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>其中的<code>dnnlib.util.construct_class_by_name</code>方法定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">construct_class_by_name</span>(<span class="params">*args, class_name: <span class="built_in">str</span> = <span class="literal">None</span>, **kwargs</span>) -&gt; <span class="type">Any</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Finds the python class with the given name and constructs it with the given arguments.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> call_func_by_name(*args, func_name=class_name, **kwargs)</span><br></pre></td></tr></table></figure><p>用于查找具有给定名称的<code>python类</code>，并用给定参数构造它。对应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">training_set = dnnlib.util.construct_class_by_name(**training_set_kwargs) </span><br><span class="line"><span class="comment"># subclass of training.dataset.Dataset</span></span><br></pre></td></tr></table></figure><p>这里的注解，得到的<code>training_set</code>是<code>subclass of training.dataset.Dataset</code>。<br>其中<code>**training_set_kwargs</code>中有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">args.training_set_kwargs = dnnlib.EasyDict(class_name=<span class="string">&#x27;training.dataset.ImageFolderDataset&#x27;</span>, path=data, use_labels=<span class="literal">True</span>, max_size=<span class="literal">None</span>, xflip=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dataset</span>(torch.utils.data.Dataset):</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageFolderDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    ...    </span><br></pre></td></tr></table></figure><p>可以看出，<code>training_set</code>是属于<code>ImageFolderDataset</code>类，而<code>ImageFolderDataset</code>类是<code>Dataset</code>的继承，符合注解中的”<code>training_set</code>是<code>subclass of training.dataset.Dataset</code>“。</p><h4 id="Setup-augmentation"><a href="#Setup-augmentation" class="headerlink" title="Setup augmentation"></a>Setup augmentation</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Setup augmentation.</span></span><br><span class="line"><span class="keyword">if</span> rank == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Setting up augmentation...&#x27;</span>)</span><br><span class="line">augment_pipe = <span class="literal">None</span></span><br><span class="line">ada_stats = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> (augment_kwargs <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>) <span class="keyword">and</span> (augment_p &gt; <span class="number">0</span> <span class="keyword">or</span> ada_target <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">    augment_pipe = dnnlib.util.construct_class_by_name(**augment_kwargs).train().requires_grad_(<span class="literal">False</span>).to(device) <span class="comment"># subclass of torch.nn.Module</span></span><br><span class="line">    augment_pipe.p.copy_(torch.as_tensor(augment_p))</span><br><span class="line">    <span class="keyword">if</span> ada_target <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        ada_stats = training_stats.Collector(regex=<span class="string">&#x27;Loss/signs/real&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">args.augment_kwargs = dnnlib.EasyDict(class_name=<span class="string">&#x27;training.augment.AugmentPipe&#x27;</span>, **augpipe_specs[augpipe])</span><br></pre></td></tr></table></figure><p>这里说明<code>augment_pipe</code>是<code>training.augment.AugmentPipe</code>类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AugmentPipe</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">        xflip=<span class="number">0</span>, rotate90=<span class="number">0</span>, xint=<span class="number">0</span>, xint_max=<span class="number">0.125</span>,</span></span><br><span class="line"><span class="params">        scale=<span class="number">0</span>, rotate=<span class="number">0</span>, aniso=<span class="number">0</span>, xfrac=<span class="number">0</span>, scale_std=<span class="number">0.2</span>, rotate_max=<span class="number">1</span>, aniso_std=<span class="number">0.2</span>, xfrac_std=<span class="number">0.125</span>,</span></span><br><span class="line"><span class="params">        brightness=<span class="number">0</span>, contrast=<span class="number">0</span>, lumaflip=<span class="number">0</span>, hue=<span class="number">0</span>, saturation=<span class="number">0</span>, brightness_std=<span class="number">0.2</span>, contrast_std=<span class="number">0.5</span>, hue_max=<span class="number">1</span>, saturation_std=<span class="number">1</span>,</span></span><br><span class="line"><span class="params">        imgfilter=<span class="number">0</span>, imgfilter_bands=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], imgfilter_std=<span class="number">1</span>,</span></span><br><span class="line"><span class="params">        noise=<span class="number">0</span>, cutout=<span class="number">0</span>, noise_std=<span class="number">0.1</span>, cutout_size=<span class="number">0.5</span>,</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        ......</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(net,self).__init__()</span><br><span class="line">        self.register_buffer(<span class="string">&quot;a&quot;</span>,torch.ones(<span class="number">2</span>,<span class="number">3</span>))<span class="comment">#从此，self.a其实就是torch.ones(2,3)。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> x+self.a<span class="comment">#使用</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GAN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读GAN-ADA问题记录</title>
      <link href="/2024/03/16/Python-tech/"/>
      <url>/2024/03/16/Python-tech/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#a1"><code>*</code>号的使用</a> </li><li><a href="#a2"><code>super(father).__init__()</code></a></li><li><a href="#a3"><code>if</code>的后置</a></li><li><a href="#a4"><code>for</code>的后置</a></li></ul><p><a id="a1"></a>      </p><h3 id="号的使用"><a href="#号的使用" class="headerlink" title="*号的使用"></a><code>*</code>号的使用</h3><p>对于<code>*</code>出现在函数参数中的情况可以表示为可变参数，一般写作<code>*args</code> ，用于将可变数量的参数传递给函数        </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Fa</span>(<span class="params">*args</span>):</span><br><span class="line">    c=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        c=c*n</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Fa(<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">#输出6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Fa(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))  <span class="comment">#输出24</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Fa(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))  <span class="comment">#输出120</span></span><br></pre></td></tr></table></figure><p>对于单独出现在参数中的<code>*</code>参数，则表示，<code>*</code>后面的参数必须为关键字参数的形式</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">a, *, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br></pre></td></tr></table></figure><p>此时要正确使用<code>f1</code>需要<code>b,c</code>以关键字参数的形式传递参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1(<span class="number">1</span>, b=<span class="number">2</span> , c=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>对于<code>**kwargs</code> 参数允许我们将字典类型的键值对参数传递给函数。       </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myFun</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> kwargs:</span><br><span class="line">        <span class="built_in">print</span>(i,<span class="string">&#x27;-&#x27;</span>,kwargs[i])</span><br><span class="line"></span><br><span class="line">myFun(a=<span class="number">10</span>, b=<span class="number">20</span>, c=<span class="number">30</span>, d=<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">a - <span class="number">10</span></span><br><span class="line">b - <span class="number">20</span></span><br><span class="line">c - <span class="number">30</span></span><br><span class="line">d - <span class="number">40</span></span><br></pre></td></tr></table></figure><p><a id="a2"></a>      </p><h3 id="super-father-init"><a href="#super-father-init" class="headerlink" title="super(father).__init__()"></a><code>super(father).__init__()</code></h3><p>调用父类的<code>__init__()</code>函数进行初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a=<span class="number">100</span></span><br><span class="line">        self.b=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">        self.c=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>现在有类<code>A</code>，现在想创建类<code>B</code>继承类<code>A</code>，但是类<code>B</code>的<code>self.c</code>需要改为<code>False</code>，我们尝试实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(B,self).__init__()</span><br><span class="line">        self.c=<span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.b)</span><br><span class="line">        <span class="built_in">print</span>(self.c)</span><br><span class="line">b=B()</span><br><span class="line">b.func2()</span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">xxx</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        self.a=a</span><br><span class="line">        self.b=b</span><br><span class="line">        <span class="built_in">print</span>(self.b)</span><br><span class="line">        self.prints()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prints</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;self.A:&#x27;</span>,self.a)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zilei</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a</span>):</span><br><span class="line">        <span class="built_in">super</span>(Zilei, self).__init__(a,a+<span class="number">1</span>)</span><br><span class="line">        self.a = a+<span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;self.a:&#x27;</span>, self.a)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prints</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;self.b:&#x27;</span>,self.b)</span><br><span class="line">ass=Zilei(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 1/ 先执行super(Zilei, self).__init__(a,a+1)，即执行A.__init__</span></span><br><span class="line"><span class="comment"># 所以输出print(self.b)，即2</span></span><br><span class="line"><span class="comment"># 再执行self.prints() ,值得注意的是A.prints()，在子类zilei被重写，所以应该执行的是zilei.prints()，即输出：self.b:2</span></span><br><span class="line"><span class="comment">#2/返回到zilei.__init__执行print(&#x27;self.a:&#x27;, self.a) 输出 self.a:101</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 最终输出的结果：</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># self.b:2</span></span><br><span class="line"><span class="comment"># self.a:101</span></span><br></pre></td></tr></table></figure><p><a id="a3"></a>      </p><h3 id="if的后置"><a href="#if的后置" class="headerlink" title="if的后置"></a><code>if</code>的后置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b <span class="comment"># if中条件满足则返回a，否则返回b</span></span><br><span class="line">d = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b <span class="keyword">if</span> b &gt; c <span class="keyword">else</span> c <span class="comment"># 嵌套写法，类似自然语言，可读性强</span></span><br></pre></td></tr></table></figure><p><a id="a4"></a>      </p><h3 id="for的后置"><a href="#for的后置" class="headerlink" title="for的后置"></a><code>for</code>的后置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">list</span>(<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line"><span class="comment">#[&#x27;AX&#x27;, &#x27;AY&#x27;, &#x27;AZ&#x27;, &#x27;BX&#x27;, &#x27;BY&#x27;, &#x27;BZ&#x27;, &#x27;CX&#x27;, &#x27;CY&#x27;, &#x27;CZ&#x27;]</span></span><br></pre></td></tr></table></figure><p><a id="a5"></a>      </p><h3 id="getitem-方法"><a href="#getitem-方法" class="headerlink" title="__getitem__方法"></a><code>__getitem__</code>方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Access items like ordinary dict.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.config[name]</span><br></pre></td></tr></table></figure><p>这里应该是属于python内置的方法，在类中定义了这个方法就能把实例化的类当字典用比如<code>config[&#39;augment&#39;]</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Matiplotlib热图colormap采用Parula的方法</title>
      <link href="/2024/03/14/Parula/"/>
      <url>/2024/03/14/Parula/</url>
      
        <content type="html"><![CDATA[<p>Parula为MATLAB默认的热图colormap，想要在Matiplotlib中使用，需要如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LinearSegmentedColormap</span><br><span class="line">cm_data = [[<span class="number">0.2081</span>, <span class="number">0.1663</span>, <span class="number">0.5292</span>], [<span class="number">0.2116238095</span>, <span class="number">0.1897809524</span>, <span class="number">0.5776761905</span>],</span><br><span class="line"> [<span class="number">0.212252381</span>, <span class="number">0.2137714286</span>, <span class="number">0.6269714286</span>], [<span class="number">0.2081</span>, <span class="number">0.2386</span>, <span class="number">0.6770857143</span>],</span><br><span class="line"> [<span class="number">0.1959047619</span>, <span class="number">0.2644571429</span>, <span class="number">0.7279</span>], [<span class="number">0.1707285714</span>, <span class="number">0.2919380952</span>,</span><br><span class="line">  <span class="number">0.779247619</span>], [<span class="number">0.1252714286</span>, <span class="number">0.3242428571</span>, <span class="number">0.8302714286</span>],</span><br><span class="line"> [<span class="number">0.0591333333</span>, <span class="number">0.3598333333</span>, <span class="number">0.8683333333</span>], [<span class="number">0.0116952381</span>, <span class="number">0.3875095238</span>,</span><br><span class="line">  <span class="number">0.8819571429</span>], [<span class="number">0.0059571429</span>, <span class="number">0.4086142857</span>, <span class="number">0.8828428571</span>],</span><br><span class="line"> [<span class="number">0.0165142857</span>, <span class="number">0.4266</span>, <span class="number">0.8786333333</span>], [<span class="number">0.032852381</span>, <span class="number">0.4430428571</span>,</span><br><span class="line">  <span class="number">0.8719571429</span>], [<span class="number">0.0498142857</span>, <span class="number">0.4585714286</span>, <span class="number">0.8640571429</span>],</span><br><span class="line"> [<span class="number">0.0629333333</span>, <span class="number">0.4736904762</span>, <span class="number">0.8554380952</span>], [<span class="number">0.0722666667</span>, <span class="number">0.4886666667</span>,</span><br><span class="line">  <span class="number">0.8467</span>], [<span class="number">0.0779428571</span>, <span class="number">0.5039857143</span>, <span class="number">0.8383714286</span>],</span><br><span class="line"> [<span class="number">0.079347619</span>, <span class="number">0.5200238095</span>, <span class="number">0.8311809524</span>], [<span class="number">0.0749428571</span>, <span class="number">0.5375428571</span>,</span><br><span class="line">  <span class="number">0.8262714286</span>], [<span class="number">0.0640571429</span>, <span class="number">0.5569857143</span>, <span class="number">0.8239571429</span>],</span><br><span class="line"> [<span class="number">0.0487714286</span>, <span class="number">0.5772238095</span>, <span class="number">0.8228285714</span>], [<span class="number">0.0343428571</span>, <span class="number">0.5965809524</span>,</span><br><span class="line">  <span class="number">0.819852381</span>], [<span class="number">0.0265</span>, <span class="number">0.6137</span>, <span class="number">0.8135</span>], [<span class="number">0.0238904762</span>, <span class="number">0.6286619048</span>,</span><br><span class="line">  <span class="number">0.8037619048</span>], [<span class="number">0.0230904762</span>, <span class="number">0.6417857143</span>, <span class="number">0.7912666667</span>],</span><br><span class="line"> [<span class="number">0.0227714286</span>, <span class="number">0.6534857143</span>, <span class="number">0.7767571429</span>], [<span class="number">0.0266619048</span>, <span class="number">0.6641952381</span>,</span><br><span class="line">  <span class="number">0.7607190476</span>], [<span class="number">0.0383714286</span>, <span class="number">0.6742714286</span>, <span class="number">0.743552381</span>],</span><br><span class="line"> [<span class="number">0.0589714286</span>, <span class="number">0.6837571429</span>, <span class="number">0.7253857143</span>],</span><br><span class="line"> [<span class="number">0.0843</span>, <span class="number">0.6928333333</span>, <span class="number">0.7061666667</span>], [<span class="number">0.1132952381</span>, <span class="number">0.7015</span>, <span class="number">0.6858571429</span>],</span><br><span class="line"> [<span class="number">0.1452714286</span>, <span class="number">0.7097571429</span>, <span class="number">0.6646285714</span>], [<span class="number">0.1801333333</span>, <span class="number">0.7176571429</span>,</span><br><span class="line">  <span class="number">0.6424333333</span>], [<span class="number">0.2178285714</span>, <span class="number">0.7250428571</span>, <span class="number">0.6192619048</span>],</span><br><span class="line"> [<span class="number">0.2586428571</span>, <span class="number">0.7317142857</span>, <span class="number">0.5954285714</span>], [<span class="number">0.3021714286</span>, <span class="number">0.7376047619</span>,</span><br><span class="line">  <span class="number">0.5711857143</span>], [<span class="number">0.3481666667</span>, <span class="number">0.7424333333</span>, <span class="number">0.5472666667</span>],</span><br><span class="line"> [<span class="number">0.3952571429</span>, <span class="number">0.7459</span>, <span class="number">0.5244428571</span>], [<span class="number">0.4420095238</span>, <span class="number">0.7480809524</span>,</span><br><span class="line">  <span class="number">0.5033142857</span>], [<span class="number">0.4871238095</span>, <span class="number">0.7490619048</span>, <span class="number">0.4839761905</span>],</span><br><span class="line"> [<span class="number">0.5300285714</span>, <span class="number">0.7491142857</span>, <span class="number">0.4661142857</span>], [<span class="number">0.5708571429</span>, <span class="number">0.7485190476</span>,</span><br><span class="line">  <span class="number">0.4493904762</span>], [<span class="number">0.609852381</span>, <span class="number">0.7473142857</span>, <span class="number">0.4336857143</span>],</span><br><span class="line"> [<span class="number">0.6473</span>, <span class="number">0.7456</span>, <span class="number">0.4188</span>], [<span class="number">0.6834190476</span>, <span class="number">0.7434761905</span>, <span class="number">0.4044333333</span>],</span><br><span class="line"> [<span class="number">0.7184095238</span>, <span class="number">0.7411333333</span>, <span class="number">0.3904761905</span>],</span><br><span class="line"> [<span class="number">0.7524857143</span>, <span class="number">0.7384</span>, <span class="number">0.3768142857</span>], [<span class="number">0.7858428571</span>, <span class="number">0.7355666667</span>,</span><br><span class="line">  <span class="number">0.3632714286</span>], [<span class="number">0.8185047619</span>, <span class="number">0.7327333333</span>, <span class="number">0.3497904762</span>],</span><br><span class="line"> [<span class="number">0.8506571429</span>, <span class="number">0.7299</span>, <span class="number">0.3360285714</span>], [<span class="number">0.8824333333</span>, <span class="number">0.7274333333</span>, <span class="number">0.3217</span>],</span><br><span class="line"> [<span class="number">0.9139333333</span>, <span class="number">0.7257857143</span>, <span class="number">0.3062761905</span>], [<span class="number">0.9449571429</span>, <span class="number">0.7261142857</span>,</span><br><span class="line">  <span class="number">0.2886428571</span>], [<span class="number">0.9738952381</span>, <span class="number">0.7313952381</span>, <span class="number">0.266647619</span>],</span><br><span class="line"> [<span class="number">0.9937714286</span>, <span class="number">0.7454571429</span>, <span class="number">0.240347619</span>], [<span class="number">0.9990428571</span>, <span class="number">0.7653142857</span>,</span><br><span class="line">  <span class="number">0.2164142857</span>], [<span class="number">0.9955333333</span>, <span class="number">0.7860571429</span>, <span class="number">0.196652381</span>],</span><br><span class="line"> [<span class="number">0.988</span>, <span class="number">0.8066</span>, <span class="number">0.1793666667</span>], [<span class="number">0.9788571429</span>, <span class="number">0.8271428571</span>, <span class="number">0.1633142857</span>],</span><br><span class="line"> [<span class="number">0.9697</span>, <span class="number">0.8481380952</span>, <span class="number">0.147452381</span>], [<span class="number">0.9625857143</span>, <span class="number">0.8705142857</span>, <span class="number">0.1309</span>],</span><br><span class="line"> [<span class="number">0.9588714286</span>, <span class="number">0.8949</span>, <span class="number">0.1132428571</span>], [<span class="number">0.9598238095</span>, <span class="number">0.9218333333</span>,</span><br><span class="line">  <span class="number">0.0948380952</span>], [<span class="number">0.9661</span>, <span class="number">0.9514428571</span>, <span class="number">0.0755333333</span>],</span><br><span class="line"> [<span class="number">0.9763</span>, <span class="number">0.9831</span>, <span class="number">0.0538</span>]]</span><br><span class="line"></span><br><span class="line">parula_map = LinearSegmentedColormap.from_list(<span class="string">&#x27;parula&#x27;</span>, cm_data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在matiplotlib绘图函数中使用方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.contourf(tnew, k, Wavefield_polar_180k,cmap=parula_map)</span><br></pre></td></tr></table></figure><p>比如可得到图片为：</p><div align=center><img src="/image/Parula_pic.png" width="50%" height="50%"></div>]]></content>
      
      
      <categories>
          
          <category> 绘图 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>变分法基础</title>
      <link href="/2024/03/13/variational-method/"/>
      <url>/2024/03/13/variational-method/</url>
      
        <content type="html"><![CDATA[<h3 id="变分法预备定理"><a href="#变分法预备定理" class="headerlink" title="变分法预备定理"></a>变分法预备定理</h3><p>若对任意$h(x)$，有$\int_a^b{M(x)h(x)dx}&#x3D;0$，且$h(a)&#x3D;h(b)&#x3D;0$,则$M(x)&#x3D;0$。</p><p>证：</p><p>因为$h(x)$为任意函数，取:</p><p>$$h(x)&#x3D;-M(x)(x-a)(x-b),$$</p><p>则</p><p>$$M(x)h(x)&#x3D;-M^{2}(x)(x-a)(x-b)。$$</p><p>因为</p><p>$$-(x-a)(x-b)\geq0,$$</p><p>所以若使</p><p>$$\int_a^b{M(x)h(x)dx}&#x3D;\int_a^bM^{2}(x)[-(x-a)(x-b)]dx&#x3D;0,$$</p><p>必须要求$M^{2}(x)&#x3D;0$，即$M(x)&#x3D;0$。</p><p>同样的，对于任意$\eta(x)$,$\xi(x)$，有</p><p>$$\int_a^b{[M(x)\eta(x)+N(x)\xi(x)]dx}&#x3D;0，$$</p><p>且</p><p>$$\eta(a)&#x3D;\eta(b)&#x3D;\xi(a)&#x3D;\xi(b)，$$</p><p>则有$M(x)&#x3D;N(x)&#x3D;0$。</p><h3 id="泛函极值问题"><a href="#泛函极值问题" class="headerlink" title="泛函极值问题"></a>泛函极值问题</h3><p>考虑以下形式泛函的极值问题，假设$y(x)$使得以下表达式的值最大或最小：</p><p>$$I(y(x))&#x3D;\int_{x_1}^{x_2}F(x,y,y’)dx$$</p><p>假设对于一般的$\overline{y}$，有：</p><p>$$\overline{y}&#x3D;y+\epsilon \eta$$</p><p>其中，$\eta$为任意的一、二阶均可导的函数，且有：</p><p>$$\eta(x_1)&#x3D;\eta(x_2)&#x3D;0$$</p><p>则当$I$取得极值时，其对$\epsilon$的导数为0（参考函数极值问题），并且$\overline{y}&#x3D;y$。因此，有：</p><p>$$\frac{dI(\overline{y}(x))}{d\epsilon}&#x3D;  \int_{x_1}^{x_2} \frac{dF(x,y+\epsilon \eta,y’+\epsilon \eta’)}{d\epsilon}dx&#x3D;0\ \mathsf {where}\ (\epsilon&#x3D;0),$$</p><p>其中，</p><p>$$\frac{dF(x,y+\epsilon \eta,y’+\epsilon \eta’)}{d\epsilon}&#x3D;{F_y}(x,y,y’) \eta+F_{y’}(x,y,y’) \eta’\ \mathsf {where}\ (\epsilon&#x3D;0),$$</p><p>因此，有</p><p>$$\int_{x_1}^{x_2}{F_y}(x,y,y’) \eta+F_{y’}(x,y,y’) \eta’dx&#x3D;0$$</p><p>其中，第二项</p><p>$$\int_{x_1}^{x_2}F_{y’}(x,y,y’) \eta’dx&#x3D;\int_{x_1}^{x_2}F_{y’}(x,y,y’) d\eta$$</p><p>$$\int_{x_1}^{x_2}F_{y’}(x,y,y’) \eta’dx&#x3D;{F_{y’}({…})\eta(x_2)}-{F_{y’}({…})\eta(x_1)}-\int_{x_1}^{x_2}\frac{dF_{y’}}{dx}\eta dx$$</p><p>由于$\eta(x_1)&#x3D;\eta(x_2)&#x3D;0$</p><p>$$\int_{x_1}^{x_2}F_{y’}(x,y,y’) \eta’dx&#x3D;-\int_{x_1}^{x_2}\frac{dF_{y’}}{dx}\eta dx$$</p><p>因此，有</p><p>$$\int_{x_1}^{x_2}[{F_y}(x,y,y’) -\frac{dF_{y’}}{dx}]\eta dx&#x3D;0$$</p><p>有变分法预备定理可知：</p><p>$${F_y}(x,y,y’) -\frac{dF_{y’}}{dx}&#x3D;0$$</p><p>此时，得到欧拉方程的形式一。</p><p>下面对形式二进行推导：</p><p>$$\frac{dF(x,y,y’)}{dx}&#x3D;F_{x}+y’F_{y}+y’’F_{y’}$$</p><p>$$\frac{d}{dx}{(y’F_{y’})}&#x3D;y’’{F_{y’}}+y’\frac{dF_{y’}}{dx}$$</p><p>把上上式中的$y’’{F_{y’}}$代入上式中：</p><p>$$\frac{d}{dx}{(y’F_{y’})}&#x3D;\frac{dF}{dx}-F_{x}-y’F_{y}+y’\frac{dF_{y’}}{dx}$$</p><p>$$F_x-\frac{d}{dx}(F-y’F_{y’})&#x3D;-y’F_{y}+y’\frac{dF_{y’}}{dx}$$</p><p>由欧拉方程的形式一可知，上式右部分为0，因此有：</p><p>$$F_x-\frac{d}{dx}(F-y’F_{y’})&#x3D;0$$</p><p>由此得到欧拉方程的形式二。</p>]]></content>
      
      
      <categories>
          
          <category> 变分法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>地球物理勘探基础（二）</title>
      <link href="/2024/03/12/exploration-geophysics-II/"/>
      <url>/2024/03/12/exploration-geophysics-II/</url>
      
        <content type="html"><![CDATA[<h3 id="地震勘探"><a href="#地震勘探" class="headerlink" title="地震勘探"></a>地震勘探</h3><p>观测和研究人工地震产生的地震波在地下的传播规律来解决地质问题的地球物理方法。</p><p>人工激发地震$\Rightarrow$地下介质中传播$\Rightarrow$遇弹性界面返回$\Rightarrow$仪器接收$\Rightarrow$地震记录$\Rightarrow$处理解释$\Rightarrow$了解地下介质</p>]]></content>
      
      
      <categories>
          
          <category> 地球物理勘探基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>地球物理勘探基础（一）</title>
      <link href="/2024/03/12/exploration-geophysics/"/>
      <url>/2024/03/12/exploration-geophysics/</url>
      
        <content type="html"><![CDATA[<p>传统超声与超声导波中的逆时偏移和全波反演方法都来自于地震法勘探领域，从了解方法理论演变历史的角度出发，浅学一下这个领域的知识是很有必要的。</p><p>地球物理勘探属于反演方法，利用被测物和周围环境在某物理量上的差异，对被测物信息进行测量，对测量信息进行整理处理并反演。与正演方法相比，反演方法虽然具有多解性，但也能获得更多的信息。</p><span id="more"></span><h3 id="勘探方法"><a href="#勘探方法" class="headerlink" title="勘探方法"></a>勘探方法</h3><p>根据<strong>被测物</strong>与<strong>围岩</strong>在物理量上的差异，有以下勘探方法：      </p><ul><li>重力法探勘</li><li>电法勘探</li><li>磁法探勘</li><li>地震法勘探（人工地震）</li></ul><p>显然，被测物与围岩在某<strong>物理量</strong>上的<strong>差异越大</strong>，利用该物理量对应的方法进行<strong>勘探效果就越好</strong>，反之<strong>差异越小</strong>，<strong>效果就越差</strong>。<strong>重力</strong>勘探基于被测物与围岩的<strong>密度差异</strong>，<strong>地震</strong>法则是基于<strong>波阻抗差异</strong>。这些勘探方法都是通过测量值或测量信号反向对被测物信息进行求解的方法，属于典型的反演方法。</p><p>反演方法具有以下特点（相比于正演方法）：        </p><ul><li>检测范围大</li><li>精度低</li></ul><p>勘探中，钻井取样属于正演方法，其具有以下特点：  </p><ul><li>检测范围小</li><li>精度高</li></ul><h3 id="重力勘探"><a href="#重力勘探" class="headerlink" title="重力勘探"></a>重力勘探</h3><p>利用物质密度分布不均而造成的重力微小变化进行勘探的方法。</p><p>重力场可分为：</p><ul><li>正常重力场</li><li>随时间变化的重力场</li><li>重力异常</li></ul><p>重力测量仪器按原理可分为：</p><ul><li>动力法（绝对重力值） </li><li>静力法（相对重力值）</li></ul><h4 id="动力法"><a href="#动力法" class="headerlink" title="动力法"></a>动力法</h4><p>对于绝对重力值的测量，想象有一个质量为$m$的物体发生自由落体，则有：</p><p>$$h&#x3D;\frac{1}{2}gt^{2}$$     </p><p>基于</p><p>$$g&#x3D;\frac{2h}{t^{2}}$$</p><p>可通过测量时间$t$和高度$h$以获得绝对重力值。</p><p>此外，可想象有一个单摆，其周期为：</p><p>$$T&#x3D;2\pi\sqrt{\frac{l}{g}}$$        </p><p>基于</p><p>$$g&#x3D;l(\frac{2\pi}{T})^{2}$$</p><p>可通过测量摆动长度$l$与摆动周期$T$以获得绝对重力值。</p><h4 id="静力法"><a href="#静力法" class="headerlink" title="静力法"></a>静力法</h4><p>想象一根刚度为$k$的弹簧，上端连接固定端，下端连接质量为$m$的重物。在地点$A$时,弹簧长度为$S_{0}$，在地点$B$时，弹簧长度为$S$，则有：     </p><p>$$m{\Delta}g&#x3D;k(S-S_{0})$$</p><p>$${\Delta}g&#x3D;\frac{k(S-S_{0})}{m}$$</p><p>通过弹簧长度的差值，可以获得相对重力值${\Delta}g$，工程实际中一般采用相对重力值法。         </p><h3 id="磁法勘探"><a href="#磁法勘探" class="headerlink" title="磁法勘探"></a>磁法勘探</h3><p>以磁性差异为基础，通过观测和研究磁异常来达到解决地质问题的目的。</p><p>同样的，地磁场分为：</p><ul><li>基本磁场</li><li>变化磁场</li><li>磁异常</li></ul><h3 id="电法勘探"><a href="#电法勘探" class="headerlink" title="电法勘探"></a>电法勘探</h3><p>以岩石和矿石的导电性、电化学活动性、介电性和导磁性的差异为基础进行勘探的方法。</p><p>勘探方法可分为：</p><ul><li>传导类电法勘探 直流电</li><li>感应类电法勘探 交流电</li></ul><h4 id="地电学"><a href="#地电学" class="headerlink" title="地电学"></a>地电学</h4><p>利用电法探测中的某些方法，研究固体地球内部介质及其周围的电性和电场分布规律。        </p>]]></content>
      
      
      <categories>
          
          <category> 地球物理勘探基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>叠合板的刚度、阻尼计算与Lisa法</title>
      <link href="/2024/03/11/%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/03/11/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="叠合层的刚度矩阵"><a href="#叠合层的刚度矩阵" class="headerlink" title="叠合层的刚度矩阵"></a>叠合层的刚度矩阵</h3><p>当波沿着<strong>正交各向异性板主轴</strong>传播时，<strong>刚度矩阵</strong>可为：</p><div align=center><img src="/image/stiffness_matrix.png" width="25%" height="25%"></div><p>使用变换矩阵处理：</p><div align=center><img src="/image/stiffness_matrix_trans_eq.png" width="12%" height="12%"></div><div align=center><img src="/image/stiffness_matrix_trans_expression.png" width="25%" height="25%"></div><p>其中变换矩阵为：</p><div align=center><img src="/image/Trans_matrix.png" width="50%" height="50%"></div><h3 id="叠合层的粘度矩阵"><a href="#叠合层的粘度矩阵" class="headerlink" title="叠合层的粘度矩阵"></a>叠合层的粘度矩阵</h3><p><strong>引入粘度矩阵来描述阻尼</strong></p><p>和刚度矩阵的情况类似，一旦堆叠方向不在坐标轴方向，就需要对粘度矩阵进行处理：</p><div align=center><img src="/image/vis_trans.png" width="40%" height="40%"></div><p>旋转矩阵为：</p><div align=center><img src="/image/Trans_matrix.png" width="50%" height="50%"></div><p>总的位移值可以拆分为刚度部分和阻尼部分的和，最终的有限差分法在阻尼部分的迭代方程可见<a href="https://iopscience.iop.org/article/10.1088/0964-1726/25/9/095021">点此跳转文献链接</a></p><div align=center><img src="/image/w_al_div.png" width="30%" height="30%"></div><h3 id="压电传感器和结构的耦合作用"><a href="#压电传感器和结构的耦合作用" class="headerlink" title="压电传感器和结构的耦合作用"></a>压电传感器和结构的耦合作用</h3><p>使用ANSYS对PZT传感器以及一小片带有无反射边界（<em>NRB</em>）叠合板进行建模，并通过 frequency domain harmonic analysis获得频域响应（位移）：</p><div align=center><img src="/image/FEM_PZT_plate.png" width="50%" height="50%"></div><p>记频域响应为：</p><div align=center><img src="/image/res_of_t.png" width="30%" height="30%"></div><p>对实际激励信号进行傅里叶变换并记为 $\tilde{V}(\omega)$ ，则叠合板处在频域上的响应为：</p><div align=center><img src="/image/res_in_freq.png" width="25%" height="25%"></div><p>通过逆变换可得叠合板上由PZT板激励的实际位移：</p><div align=center><img src="/image/res_in_time.png" width="25%" height="25%"></div><div align=center><img src="/image/disp_dist_in_plate.png" width="50%" height="50%"></div><p>对于各向异性板，导波的传播方程为：</p><div align=center><img src="/image/wave_und.png" width="30%" height="30%"></div><p>在对上式下标进行简化后，可以写为：</p><div align=center><img src="/image/wave_und2.png" width="18%" height="18%"></div><p>将板结构进行离散化，下方右图中的 $\delta$ 是用来表征立方体中心点在哪一侧的导数。</p><div align=center><img src="/image/FD_cube.png" width="28%" height="28%"><img src="/image/FD_cube2.png" width="30%" height="30%"></div>        <p>则中心单元的二阶偏导有：</p><div align=center><img src="/image/wave_der_2.png" width="40%" height="40%"></div>其中：<div align=center><img src="/image/wave_der_1.png" width="20%" height="20%"></div><p>对应原先边长为 $\delta$ 的小立方体的边界的的一阶偏导有：</p><div align=center><img src="/image/wave_der_1t.png" width="23%" height="23%"></div><div align=center><img src="/image/FD_cube3.png" width="27%" height="27%"></div><p>通过下式可将上式中的位移分量转化为应力分量：</p><div align=center><img src="/image/w2stress.png" width="13%" height="13%"></div><p>从而可以使用上中心点处的剪应力连续条件：</p><div align=center><img src="/image/shear_stress_continue.png" width="19%" height="19%"></div><p>其中， $\rho&#x3D;1,2,3$ 。</p><p>最终的三个位移分量的有限差分法迭代方程可见（太长了）：<br><a href="https://link.springer.com/article/10.1007/s13272-012-0061-9">点此跳转文献链接</a></p><p>此外，应当满足约束：</p><div align=center><img src="/image/constraint.png" width="22%" height="22%"></div>]]></content>
      
      
      <categories>
          
          <category> 有限元计算 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网站使用说明</title>
      <link href="/2024/03/11/hello-world/"/>
      <url>/2024/03/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
